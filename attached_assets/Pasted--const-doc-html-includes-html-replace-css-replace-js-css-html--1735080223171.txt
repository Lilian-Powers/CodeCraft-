`; const doc = html.includes('') ? html.replace('', `${css}`).replace('', `${js}`) : `${css}${html}${js}`; preview.srcdoc = doc; } catch (error) { output.querySelector('pre').textContent = `Error: ${error.message}\n\nðŸ’¡ Hint: ${getHint(error.message, 'javascript')}`; } } function getHint(error, language) { const hints = { python: { 'NameError': 'Remember to define your variables before using them!', 'SyntaxError': 'Check your syntax - you might be missing parentheses, colons, or proper indentation.', 'IndentationError': 'Python is sensitive to indentation. Make sure your code blocks are properly indented.', 'TypeError': 'Make sure you\'re using the correct data types in your operations.', 'ZeroDivisionError': 'You\'re trying to divide by zero - check your division operations.', 'IndexError': 'You\'re trying to access a list index that doesn\'t exist.', 'KeyError': 'You\'re trying to access a dictionary key that doesn\'t exist.', 'ImportError': 'The module you\'re trying to import isn\'t available.', 'AttributeError': 'The object doesn\'t have the attribute/method you\'re trying to use.' }, javascript: { 'ReferenceError': 'Make sure all variables are declared before using them.', 'SyntaxError': 'Check your syntax - you might be missing brackets, semicolons, or quotes.', 'TypeError': 'You\'re trying to perform an operation on an incompatible type.', 'RangeError': 'A number is outside the allowable range.', 'Uncaught': 'Check if you\'re using any undefined functions or variables.', 'undefined': 'The variable or function you\'re trying to use doesn\'t exist.', 'null': 'You\'re trying to access properties on a null object.' }, html: { 'Unclosed tag': 'Make sure all your HTML tags are properly closed.', 'Invalid tag': 'Check if you\'re using valid HTML tags.', 'Missing attribute': 'Required attributes might be missing from your tags.', 'Duplicate ID': 'IDs must be unique in HTML. Check for duplicate IDs.', 'Invalid nesting': 'Make sure your tags are properly nested.' }, css: { 'Invalid property': 'Check if you\'re using valid CSS properties.', 'Missing value': 'CSS properties must have values.', 'Invalid selector': 'Your CSS selector might be incorrect.', 'Missing unit': 'Numeric values usually need units (px, em, rem, etc).', 'Unclosed bracket': 'Make sure all your CSS blocks are properly closed.', 'Invalid color': 'Check if your color values are correctly formatted.' } }; for (const [errorType, hint] of Object.entries(hints[language] || {})) { if (error.includes(errorType)) { return `ðŸ’¡ Hint: ${hint}`; } } return 'ðŸ’¡ Tip: Try breaking down your code into smaller parts to find the issue.'; } document.getElementById('runButton').addEventListener('click', function() { const language = languageSelect.value; if (language === 'python') { const code = editor.getValue(); fetch('/run_python', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ source: code }) }) .then(response => response.json()) .then(data => { if (data.error) { const hint = getHint(data.error, language); output.querySelector('pre').textContent = data.error + '\n\n' + hint; } else { output.querySelector('pre').textContent = data.run.output; } }); } else if (['html', 'css', 'javascript'].includes(language)) { output.style.display = 'block'; output.querySelector('pre').textContent = ''; // First check for syntax errors try { new Function(editor.getValue()); } catch (error) { const hint = getHint(error.toString(), language); output.querySelector('pre').textContent = `Syntax Error: ${error.toString()}\n\nðŸ’¡ Fix: ${hint}`; return; } // If no syntax errors, update preview updatePreview(); } } });