I want to create a fully customized coding editor embedded into my website for online learners. The editor should meet the following specifications:

Overview:
Build a seamless, visually appealing, and professionally styled coding environment tailored for beginner-level learners.
Remove any existing editor code and start fresh with the specified requirements below.
Use appropriate colors, contrast, and layout for readability and ease of use.
Include dropdown menus with a header that instructs learners to "Choose a Language" when selecting the programming language.
Core Features:
Monaco Editor Integration:

Embed the Monaco Editor (used in VS Code) as the core editor.
Ensure syntax highlighting, IntelliSense-like autocompletion, and error diagnostics for the following languages: Python, HTML, CSS, and JavaScript.
Python Execution:

Use Pyodide to enable learners to run Python code directly in the browser.
Ensure smooth integration with Monaco Editor for a cohesive experience.
Web Development Execution:

Use CodeMirror or Ace Editor to enable real-time execution of JavaScript, HTML, and CSS in the browser.
Provide a live preview panel where learners can see the output of their HTML, CSS, and JavaScript code as they write.
Syntax Error Assistance:

Add real-time hints and suggestions for syntax errors in all supported languages.
Display error messages that are clear, beginner-friendly, and include tips for correcting mistakes to encourage learners.
User Interface:

Professionally style the editor with a clean, modern layout.
Use a sidebar or dropdown menu to let learners select their preferred language with a prominent header ("Choose a Language").
Ensure the layout is responsive and works well on both desktop and mobile devices.
Configuration:

Pre-configure the editor with basic templates for each language so learners can start coding immediately (e.g., a “Hello, World!” program for Python, HTML, CSS, and JavaScript).
Allow learners to save and reload their code within the session.
Additional Requirements:
Ensure smooth performance even on low-end devices and slow internet connections.
Include well-commented code for ease of maintenance and further customization.
Use open-source libraries and tools to avoid licensing issues.
Optimize for accessibility (e.g., support screen readers, keyboard navigation, and high-contrast mode for visually impaired learners).
Goal:
Create a fully functional, browser-based coding environment where learners can smoothly code in Python, HTML, CSS, and JavaScript, see real-time outputs, and receive helpful feedback on errors. The editor should be simple yet powerful, inspiring learners to keep coding while making the learning process intuitive and enjoyable.

